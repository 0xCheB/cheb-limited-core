// ICheBProofOfPurchase.sol (Interface)
// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import "./ICheBControlCenter.sol";

/**
 * @title ICheBProofOfPurchase
 * @notice Interface for CheBProofOfPurchase contracts, defining the functionality
 *         for managing proof-of-purchase tokens, including size and inventory management.
 *         This interface outlines the methods for interacting with individual CheB POP token contracts
 *         generated by the CheBProofOfPurchaseFactory.
 */
interface ICheBProofOfPurchase {
    /**
     * @notice Structure representing details for a specific token size.
     * @param price The price associated with this size.
     * @param totalSupply The total supply minted for this size.
     * @param exists Boolean indicating if this size has been defined.
     */
    struct SizeDetails {
        uint256 price;
        uint256 totalSupply;
        bool exists;
    }

    /**
     * @notice Error thrown when an unauthorized action is attempted.
     */
    error Unauthorized();
    /**
     * @notice Error thrown when an invalid size is specified.
     */
    error InvalidSize();
    /**
     * @notice Error thrown when an invalid price is provided.
     */
    error InvalidPrice();
    /**
     * @notice Error thrown when there is insufficient inventory to fulfill a request.
     */
    error InsufficientInventory();
    /**
     * @notice Error thrown when an invalid amount is provided.
     */
    error InvalidAmount();
    /**
     * @notice Error thrown when attempting to add a size that already exists.
     */
    error SizeAlreadyExists();
    /**
     * @notice Error thrown when an action is attempted by an address that is not a verified seller.
     */
    error NotVerifiedSeller();
    /**
     * @notice Error thrown when attempting to access details of a size that does not exist.
     */
    error SizeNotExists();
    /**
     * @notice Error thrown by ERC1155 functions when balance is insufficient.
     * @param sender Address attempting the transfer.
     * @param id Token ID being transferred.
     * @param balance Current balance of the sender.
     * @param needed Amount needed for the transfer.
     */
    error ERC1155InsufficientBalance(address sender, uint256 id, uint256 balance, uint256 needed);
    /**
     * @notice Error thrown by ERC1155 functions when receiver is invalid.
     * @param receiver Address of the receiver.
     */
    error ERC1155InvalidReceiver(address receiver);
    /**
     * @notice Error thrown by ERC1155 functions when approval caller is not owner or approved for all.
     */
    error ApprovalCallerIsNotOwnerOrApprovedForAll();
    /**
     * @notice Error thrown by ERC1155 functions when approval is queried for non-operators.
     */
    error ApprovalQueryForNonOperators();
    /**
     * @notice Error thrown by ERC1155 functions when transfer caller is not owner or approved.
     */
    error TransferCallerNotOwnerOrApproved();
    /**
     * @notice Error thrown by ERC1155 `safeTransferFrom` and `safeBatchTransferFrom` if transfer is rejected by receiver.
     * @param receiver Address of the receiver.
     * @param operator Address of the operator initiating the transfer.
     * @param id Token ID being transferred.
     * @param value Amount being transferred.
     * @param data Data passed in the safe transfer call.
     */
    error SafeTransferRejected(address receiver, address operator, uint256 id, uint256 value, bytes data);
    /**
     * @notice Error thrown by ERC1155 functions when URI is queried for a non-existent token.
     */
    error URIQueryForNonExistentToken();

    /**
     * @notice Returns the address of the CheBControlCenter contract associated with this POP token.
     * @return The address of the ICheBControlCenter contract.
     */
    function chebControl() external view returns (ICheBControlCenter);

    /**
     * @notice Returns the Stock Keeping Unit ID (SKU ID) for this Proof of Purchase token.
     * @return The SKU ID as a uint256.
     */
    function skuId() external view returns (uint256);

    /**
     * @notice Retrieves details for a specific token size.
     * @param size The size to query details for.
     * @return A SizeDetails struct containing price, totalSupply, and existence status.
     */
    function sizeDetails(uint256 size) external view returns (SizeDetails memory);

    /**
     * @notice Checks if a specific token size is currently available and defined.
     * @param size The size to check availability for.
     * @return True if the size exists and is considered available, false otherwise.
     */
    function isSizeAvailable(uint256 size) external view returns (bool);

    /**
     * @notice Retrieves the inventory balance of a specific seller for a given token size.
     * @param seller The address of the seller.
     * @param size The size of the token.
     * @return The amount of inventory the seller holds for the specified size.
     */
    function sellerInventory(address seller, uint256 size) external view returns (uint256);

    /**
     * @notice Adds a new token size definition, setting its initial price.
     * @param size The size to add.
     * @param price The price to set for this size.
     * @dev Only callable by authorized roles (e.g., DEFAULT_ADMIN_ROLE in CheBControlCenter).
     * @dev It may revert with {Unauthorized} if the caller is not authorized.
     * @dev It may revert with {InvalidSize} if the size is invalid (e.g., zero).
     * @dev It may revert with {InvalidPrice} if the price is invalid (e.g., zero).
     * @dev It may revert with {SizeAlreadyExists} if a size with the given value already exists.
     */
    function addSize(uint256 size, uint256 price) external;

    /**
     * @notice Removes a token size definition, effectively deprecating it.
     * @param size The size to remove.
     * @dev Only callable by authorized roles.
     * @dev It may revert with {Unauthorized} if the caller is not authorized.
     * @dev It may revert with {SizeNotExists} if the size does not exist.
     */
    function removeSize(uint256 size) external;

    /**
     * @notice Updates the price for an existing token size.
     * @param size The size to update the price for.
     * @param newPrice The new price to set for the size.
     * @dev Only callable by authorized roles.
     * @dev It may revert with {Unauthorized} if the caller is not authorized.
     * @dev It may revert with {InvalidSize} if the size is invalid (e.g., zero).
     * @dev It may revert with {InvalidPrice} if the new price is invalid (e.g., zero).
     * @dev It may revert with {SizeNotExists} if the size does not exist.
     */
    function updatePrice(uint256 size, uint256 newPrice) external;

    /**
     * @notice Allocates inventory of a specific token size to a seller.
     * @param seller The address of the seller to allocate inventory to.
     * @param size The size of the token.
     * @param amount The amount of inventory to allocate.
     * @dev Only callable by authorized roles.
     * @dev It may revert with {Unauthorized} if the caller is not authorized.
     * @dev It may revert with {InvalidSize} if the size is invalid (e.g., zero).
     * @dev It may revert with {InvalidAmount} if the amount is invalid (e.g., zero).
     * @dev It may revert with {SizeNotExists} if the size does not exist.
     */
    function allocateInventory(address seller, uint256 size, uint256 amount) external;

    /**
     * @notice Removes inventory of a specific token size from a seller.
     * @param seller The address of the seller to remove inventory from.
     * @param size The size of the token.
     * @param amount The amount of inventory to remove.
     * @dev Only callable by authorized roles.
     * @dev It may revert with {Unauthorized} if the caller is not authorized.
     * @dev It may revert with {InvalidSize} if the size is invalid (e.g., zero).
     * @dev It may revert with {InvalidAmount} if the amount is invalid (e.g., zero).
     * @dev It may revert with {SizeNotExists} if the size does not exist.
     * @dev It may revert with {InsufficientInventory} if the seller does not have enough inventory to remove.
     */
    function removeInventory(address seller, uint256 size, uint256 amount) external;

    /**
     * @notice Locks a specified amount of tokens of a given size in escrow, typically for marketplace listings.
     * @param seller The address of the seller locking the tokens.
     * @param buyer The address of the intended buyer (can be address(0) if not yet determined).
     * @param size The size of the tokens to lock.
     * @param amount The amount of tokens to lock.
     * @dev Transfers tokens from seller's inventory to contract's escrow balance.
     * @dev It may revert with {Unauthorized} if the caller is not authorized (e.g., not the seller).
     * @dev It may revert with {InvalidSize} if the size is invalid (e.g., zero).
     * @dev It may revert with {InvalidAmount} if the amount is invalid (e.g., zero).
     * @dev It may revert with {SizeNotExists} if the size does not exist.
     * @dev It may revert with {InsufficientInventory} if the seller does not have enough inventory to lock.
     */
    function lockTokens(address seller, address buyer, uint256 size, uint256 amount) external;

    /**
     * @notice Releases tokens from escrow to a buyer upon successful order completion.
     * @param seller The address of the seller.
     * @param buyer The address of the buyer receiving the tokens.
     * @param size The size of the tokens to release.
     * @param amount The amount of tokens to release.
     * @dev Transfers tokens from contract's escrow balance to buyer.
     * @dev It may revert with {Unauthorized} if the caller is not authorized (e.g., not a marketplace verifier).
     * @dev It may revert with {InvalidSize} if the size is invalid (e.g., zero).
     * @dev It may revert with {InvalidAmount} if the amount is invalid (e.g., zero).
     * @dev It may revert with {SizeNotExists} if the size does not exist.
     * @dev It may revert with {InsufficientInventory} if the contract does not have enough escrowed inventory to release.
     */
    function releaseTokensToBuyer(address seller, address buyer, uint256 size, uint256 amount) external;

    /**
     * @notice Returns tokens from escrow back to the seller, typically when a listing is cancelled or order is refunded.
     * @param seller The address of the seller receiving the tokens back.
     * @param buyer The address of the original buyer (can be address(0) if listing cancellation).
     * @param size The size of the tokens to return.
     * @param amount The amount of tokens to return.
     * @dev Transfers tokens from contract's escrow balance back to seller's inventory.
     * @dev It may revert with {Unauthorized} if the caller is not authorized (e.g., not the seller or marketplace verifier).
     * @dev It may revert with {InvalidSize} if the size is invalid (e.g., zero).
     * @dev It may revert with {InvalidAmount} if the amount is invalid (e.g., zero).
     * @dev It may revert with {SizeNotExists} if the size does not exist.
     * @dev It may revert with {InsufficientInventory} if the contract does not have enough escrowed inventory to return.
     */
    function returnTokensToSeller(address seller, address buyer, uint256 size, uint256 amount) external;

    /**
     * @notice Retrieves a list of available token sizes within a specified range.
     * @param startSize The starting size of the range (inclusive).
     * @param endSize The ending size of the range (inclusive).
     * @return An array of uint256 representing the available sizes within the range.
     */
    function getAvailableSizes(uint256 startSize, uint256 endSize) external view returns (uint256[] memory);

    /**
     * @notice Pauses token transfers and most state-changing operations.
     * @dev Callable by authorized roles (e.g., DEFAULT_ADMIN_ROLE in CheBControlCenter).
     * @dev It may revert with {Unauthorized} if the caller is not authorized.
     */
    function pause() external;

    /**
     * @notice Unpauses token transfers and restores normal operations.
     * @dev Callable by authorized roles (e.g., DEFAULT_ADMIN_ROLE in CheBControlCenter).
     * @dev It may revert with {Unauthorized} if the caller is not authorized.
     */
    function unpause() external;

    /**
     * @notice Checks if the contract is currently paused.
     * @return True if the contract is paused, false otherwise.
     */
    function paused() external view returns (bool);

    /**
     * @notice Gets the balance of the amount of tokens of a specific ID owned by an account.
     *         Implements part of the ERC1155 interface.
     * @param account The address of the account to query.
     * @param id The ID of the token to query.
     * @return The amount of tokens of the given ID owned by the account.
     */
    function balanceOf(address account, uint256 id) external view returns (uint256);

    /**
     * @notice Batches `balanceOf` operation for array of accounts and token IDs.
     *         Implements part of the ERC1155 interface.
     * @param accounts The addresses of the accounts to query.
     * @param ids The IDs of the tokens to query.
     * @return An array of token amounts for each account-ID pair in the input arrays.
     */
    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);

    /**
     * @notice Enable or disable approval for a third party ("operator") to manage all of the caller's tokens.
     *         Implements part of the ERC1155 interface.
     * @param operator Address to add to the set of authorized operators.
     * @param approved True if the operator is approved, false to revoke approval.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @notice Checks if an address is an approved operator for another address.
     *         Implements part of the ERC1155 interface.
     * @param account The address that owns the tokens.
     * @param operator The address that acts on behalf of the owner.
     * @return True if `operator` is an approved operator for `account`, false otherwise.
     */
    function isApprovedForAll(address account, address operator) external view returns (bool);

    /**
     * @notice Safely transfers `amount` tokens of ID `id` from `from` to `to`.
     *         Implements part of the ERC1155 interface.
     * @param from The address which you want to send tokens from.
     * @param to The address which you want to transfer to.
     * @param id The ID of the token type being transferred.
     * @param amount The amount of tokens to transfer.
     * @param data Additional data with no specified format, sent in call to `to` if contract receiver.
     */
    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;

    /**
     * @notice Batched version of safeTransferFrom for multiple token types.
     *         Implements part of the ERC1155 interface.
     * @param from The address which you want to send tokens from.
     * @param to The address which you want to transfer to.
     * @param ids An array of token IDs being transferred.
     * @param amounts An array of amounts of tokens to transfer.
     * @param data Additional data with no specified format, sent in call to `to` if contract receiver.
     */
    function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;
}